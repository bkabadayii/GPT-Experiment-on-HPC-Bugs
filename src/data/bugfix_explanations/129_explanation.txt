The performance bug in the code is that the `expf` and `sqrtf` functions are being called repeatedly in the `computeGradientBasedUpdate` and `computeCurvatureBasedUpdate` functions. These functions are computationally expensive and should be avoided if possible. One way to fix this is to compute the values of `expf` and `sqrtf` outside the loops and store them in variables. Then, use these variables inside the loops instead of calling the functions repeatedly.

Here is the fixed code:

/*******************************************************
 * Copyright (c) 2019, ArrayFire
 * All rights reserved.
 *
 * This file is distributed under 3-clause BSD license.
 * The complete license agreement can be obtained at:
 * http://arrayfire.com/licenses/BSD-3-Clause
 ********************************************************/

#include <Param.hpp>
#include <math.hpp>

namespace cuda {

__forceinline__ __device__
int index(const int x, const int y, const int dim0,
          const int dim1, const int stride0, const int stride1) {
    return clamp(x, 0, dim0 - 1) * stride0 + clamp(y, 0, dim1 - 1) * stride1;
}

__device__
float quadratic(const float value) { return 1.0 / (1.0 + value); }

__device__
float computeGradientBasedUpdate(const float mct, const float C,
                                 const float S, const float N,
                                 const float W, const float E,
                                 const float SE, const float SW,
                                 const float NE, const float NW,
                                 const af::fluxFunction fftype,
                                 const float expf_val) {
    float delta = 0;

    float dx, dy, df, db, cx, cxd;

    // centralized derivatives
    dx = (E - W) * 0.5f;
    dy = (S - N) * 0.5f;

    // half-d's and conductance along first dimension
    df = E - C;
    db = C - W;

    if (fftype == AF_FLUX_EXPONENTIAL) {
        cx  = expf_val;
        cxd = expf((db * db + 0.25f * powf(dy + 0.5f * (SW - NW), 2)) * mct);
    } else {
        cx =
            quadratic((df * df + 0.25f * powf(dy + 0.5f * (SE - NE), 2)) * mct);
        cxd =
            quadratic((db * db + 0.25f * powf(dy + 0.5f * (SW - NW), 2)) * mct);
    }
    delta += (cx * df - cxd * db);

    // half-d's and conductance along second dimension
    df = S - C;
    db = C - N;

    if (fftype == AF_FLUX_EXPONENTIAL) {
        cx  = expf((df * df + 0.25f * powf(dx + 0.5f * (SE - SW), 2)) * mct);
        cxd = expf_val;
    } else {
        cx =
            quadratic((df * df + 0.25f * powf(dx + 0.5f * (SE - SW), 2)) * mct);
        cxd =
            quadratic((db * db + 0.25f * powf(dx + 0.5f * (NE - NW), 2)) * mct);
    }
    delta += (cx * df - cxd * db);

    return delta;
}

__device__
float computeCurvatureBasedUpdate(const float mct, const float C,
                                  const float S, const float N,
                                  const float W, const float E,
                                  const float SE, const float SW,
                                  const float NE, const float NW,
                                  const af::fluxFunction fftype,
                                  const float expf_val) {
    float delta     = 0;
    float prop_grad = 0;

    float df0, db0;
    float dx, dy, df, db, cx, cxd, gmf, gmb, gmsqf, gmsqb;

    // centralized derivatives
    dx = (E - W) * 0.5f;
    dy = (S - N) * 0.5f;

    // half-d's and conductance along first dimension
    df  = E - C;
    db  = C - W;
    df0 = df;
    db0 = db;

    gmsqf = (df * df + 0.25f * powf(dy + 0.5f * (S