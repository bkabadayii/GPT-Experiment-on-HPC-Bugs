Here is the fixed code:

/*---------------------------------------------------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     |
    \\  /    A nd           | Copyright (C) 2011-2014 OpenFOAM Foundation
     \\/     M anipulation  |
-------------------------------------------------------------------------------
License
    This file is part of OpenFOAM.

    OpenFOAM is free software: you can redistribute it and/or modify it
    under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    OpenFOAM is distributed in the hope that it will be useful, but WITHOUT
    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
    for more details.

    You should have received a copy of the GNU General Public License
    along with OpenFOAM.  If not, see <http://www.gnu.org/licenses/>.

\*---------------------------------------------------------------------------*/

#include "ORourkeCollision.H"
#include "mathematicalConstants.H"
#include "SLGThermo.H"

using namespace Foam::constant::mathematical;

// * * * * * * * * * * * * * Protected Member Functions  * * * * * * * * * * //

template<class CloudType>
void Foam::ORourkeCollision<CloudType>::collide(const scalar dt)
{
    label i = 0;
    forAllIter(typename CloudType, this->owner(), iter1)
    {
        label j = 0;
        forAllIter(typename CloudType, this->owner(), iter2)
        {
            if (j > i)
            {
                parcelType& p1 = iter1();
                parcelType& p2 = iter2();

                scalar m1 = p1.nParticle()*p1.mass();
                scalar m2 = p2.nParticle()*p2.mass();

                bool massChanged = collideParcels(dt, p1, p2, m1, m2);

                if (massChanged)
                {
                    if (m1 > ROOTVSMALL)
                    {
                        const scalarField X(liquids_.X(p1.Y()));
                        p1.rho() = liquids_.rho(p1.pc(), p1.T(), X);
                        p1.Cp() = liquids_.Cp(p1.pc(), p1.T(), X);
                        p1.sigma() = liquids_.sigma(p1.pc(), p1.T(), X);
                        p1.mu() = liquids_.mu(p1.pc(), p1.T(), X);
                        p1.d() = cbrt(6.0*m1/(p1.nParticle()*p1.rho()*pi));
                    }

                    if (m2 > ROOTVSMALL)
                    {
                        const scalarField X(liquids_.X(p2.Y()));
                        p2.rho() = liquids_.rho(p2.pc(), p2.T(), X);
                        p2.Cp() = liquids_.Cp(p2.pc(), p2.T(), X);
                        p2.sigma() = liquids_.sigma(p2.pc(), p2.T(), X);
                        p2.mu() = liquids_.mu(p2.pc(), p2.T(), X);
                        p2.d() = cbrt(6.0*m2/(p2.nParticle()*p2.rho()*pi));
                    }
                }
            }
            j++;
        }
        i++;
    }

    // remove coalesced parcels that fall below minimum mass threshold
    forAllIter(typename CloudType, this->owner(), iter)
    {
        parcelType& p = iter();
        scalar mass = p.nParticle()*p.mass();

        if (mass < this->owner().constProps().minParcelMass())
        {
            this->owner().deleteParticle(iter);
        }
    }
}


template<class CloudType>
bool Foam::ORourkeCollision<CloudType>::collideParcels
(
    const scalar dt,
    parcelType& p1,
    parcelType& p2,
    scalar& m1,
    scalar& m2
)
{
    const label cell1 = p1.cell();
    const label cell2 = p2.cell();

    // check if parcels belong to same cell
    if ((cell1 != cell2) || (m1 < ROOTVSMALL) || (m2 < ROOTVSMALL))
    {
        return false;
    }

    bool coalescence = false;

    const scalar Vc = this->owner().mesh().V()[cell1];
    const scalar d1 = p1.d();
    const scalar d2 = p2.d();

    scala