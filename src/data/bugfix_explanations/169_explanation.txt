The performance bug in this code is that it uses switch statements to select the appropriate kernel to call based on the value of arc_length. This can be slow for large values of arc_length because it requires a lot of branching. A better approach would be to use a lookup table to select the appropriate kernel based on the value of arc_length.

Here is the fixed code:

/*******************************************************
 * Copyright (c) 2014, ArrayFire
 * All rights reserved.
 *
 * This file is distributed under 3-clause BSD license.
 * The complete license agreement can be obtained at:
 * http://arrayfire.com/licenses/BSD-3-Clause
 ********************************************************/

#include <af/dim4.hpp>
#include <af/defines.h>
#include <af/features.h>
#include <ArrayInfo.hpp>
#include <Array.hpp>
#include <err_opencl.hpp>
#include <handle.hpp>
#include <kernel/fast.hpp>

using af::dim4;
using af::features;

namespace opencl
{

template<typename T>
features fast(const Array<T> &in, const float thr, const unsigned arc_length,
              const bool nonmax, const float feature_ratio)
{
    unsigned nfeat;

    Param x;
    Param y;
    Param score;

    static const void (*fast_kernels[8][2])(unsigned*, Param&, Param&, Param&, const Array<T>&, const float, const float) = {
        {kernel::fast<T, 9, 0>, kernel::fast<T, 9, 1>},
        {kernel::fast<T, 10, 0>, kernel::fast<T, 10, 1>},
        {kernel::fast<T, 11, 0>, kernel::fast<T, 11, 1>},
        {kernel::fast<T, 12, 0>, kernel::fast<T, 12, 1>},
        {kernel::fast<T, 13, 0>, kernel::fast<T, 13, 1>},
        {kernel::fast<T, 14, 0>, kernel::fast<T, 14, 1>},
        {kernel::fast<T, 15, 0>, kernel::fast<T, 15, 1>},
        {kernel::fast<T, 16, 0>, kernel::fast<T, 16, 1>}
    };

    fast_kernels[arc_length - 9][nonmax](&nfeat, x, y, score, in, thr, feature_ratio);

    const dim4 out_dims(nfeat);

    features feat;
    feat.setNumFeatures(nfeat);
    feat.setX(getHandle<float>(*createParamArray<float>(x)));
    feat.setY(getHandle<float>(*createParamArray<float>(y)));
    feat.setScore(getHandle<float>(*createParamArray<float>(score)));
    feat.setOrientation(getHandle<float>(*createValueArray<float>(out_dims, 0.0f)));
    feat.setSize(getHandle<float>(*createValueArray<float>(out_dims, 1.0f)));

    return feat;
}

#define INSTANTIATE(T)\
    template features fast<T>(const Array<T> &in, const float thr, const unsigned arc_length, \
                              const bool non_max, const float feature_ratio);

INSTANTIATE(float )
INSTANTIATE(double)
INSTANTIATE(char  )
INSTANTIATE(int   )
INSTANTIATE(uint  )
INSTANTIATE(uchar )

