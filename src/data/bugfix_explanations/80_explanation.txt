# Fixed code:

#
# This file is part of the GROMACS molecular simulation package.
#
# Copyright (c) 2012,2013, by the GROMACS development team, led by
# David van der Spoel, Berk Hess, Erik Lindahl, and including many
# others, as listed in the AUTHORS file in the top-level source
# directory and at http://www.gromacs.org.
#
# GROMACS is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public License
# as published by the Free Software Foundation; either version 2.1
# of the License, or (at your option) any later version.
#
# GROMACS is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with GROMACS; if not, see
# http://www.gnu.org/licenses, or write to the Free Software Foundation,
# Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA.
#
# If you want to redistribute modifications to GROMACS, please
# consider that scientific software is very special. Version
# control is crucial - bugs must be traceable. We will be happy to
# consider code for inclusion in the official distribution, but
# derived work must not be called official GROMACS. Details are found
# in the README & COPYING files - if they are missing, get the
# official version at http://www.gromacs.org.
#
# To help us fund GROMACS development, we humbly ask that you cite
# the research papers on the package. Check out http://www.gromacs.org.
#
# Manage CUDA nvcc compilation configuration, try to be smart to ease the users'
# pain as much as possible:
# - use the CUDA_HOST_COMPILER if defined by the user, otherwise
# - auto-detect compatible nvcc host compiler and set nvcc -ccbin (if not MPI wrapper)
# - set icc compatibility mode to gcc 4.4/4.5 (CUDA 4.0 is not compatible with gcc >v4.4)
# - (advanced) variables set:
#   * CUDA_HOST_COMPILER            - the host compiler for nvcc (only with cmake <2.8.10)
#   * CUDA_HOST_COMPILER_OPTIONS    - the full host-compiler related option list passed to nvcc
#
# Note that from CMake 2.8.10 FindCUDA defines CUDA_HOST_COMPILER internally,
# so we won't set it ourselves, but hope that the module does a good job.

if (NOT DEFINED CUDA_NVCC_FLAGS_SET)
    set(CUDA_NVCC_FLAGS_SET TRUE CACHE INTERNAL "True if NVCC flags have been set" FORCE)

    # Explicitly set the host compiler for nvcc if the current compiler is
    # supported and it's not an MPI compiler wrapper, otherwise warn the user.
    #
    # Note that even though nvcc compiles host code as C++, we use the
    # CMAKE_C_COMPILER as host compiler. We do this because CUDA versions
    # preceding 5.0 only recognize icc, but not icpc. However, both gcc and icc
    # (i.e. all supported compilers) happily compile C++ code.
    #
    # Also note that with MSVC nvcc sets the -compiler-bindir option behind the
    # scenes; to avoid conflicts we don't set -ccbin automatically.

    if (NOT DEFINED CUDA_HOST_COMPILER AND NOT MSVC)
        if (NOT CMAKE_COMPILER_IS_GNUCC AND
            NOT (CMAKE_C_COMPILER_ID MATCHES "Intel" AND UNIX AND NOT APPLE))
            message(WARNING "
            Will not set the nvcc host compiler because the current C compiler is not
            compatible with nvcc:
            ${CMAKE_C_COMPILER} (ID: ${CMAKE_C_COMPILER_ID})
            Compatible compilers are: gcc on Linux and Mac OS X, the Intel Compiler on 64-bit
            Linux and MSVC on Windows. Note that with newer CUDA releases this might change,
            for up-to-date compatibility information check the NVIDIA documentation.
            If nothing specified, nvcc will automatically pick the platform-default compiler;
            Note that mixing compilers can cause errors.
            To manually set the nvcc host compiler, edit CUDA_NVCC_FLAGS or re-configure
            setting CUDA_HOST_COMPILER to the full path of a compatible compiler.
            ")
        else()
            # do not use MPI compiler wrappers, as these ar